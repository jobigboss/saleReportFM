import { getCheerSummaryByChannel } from "../../utils/getPerformanceSummary";
import { getPerformanceSummary } from "../../utils/getPerformanceSummary";

const TELEGRAM_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const TELEGRAM_API = `https://api.telegram.org/bot${TELEGRAM_TOKEN}`;

export async function POST(req) {
  const body = await req.json();
  const chatId = body.message?.chat.id || body.callback_query?.message?.chat.id;
  const text = body.message?.text?.trim() || body.callback_query?.data;

  console.log("üì• ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°:", text);

  // 1. ‡∏ó‡∏±‡∏Å‡∏ó‡∏≤‡∏¢
  if (text && text.toLowerCase().includes("hello demon")) {
    await sendText(chatId, "‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡πÉ‡∏´‡πâ‡∏ú‡∏°‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡∏Ñ‡∏£‡∏±‡∏ö", [
      [
        { text: "‡∏™‡∏£‡∏∏‡∏õ‡∏¢‡∏≠‡∏î‡πÄ‡∏ä‡∏µ‡∏¢‡∏£‡πå‡∏Ç‡∏≤‡∏¢", callback_data: "summary_cheer" },
        { text: "‡∏™‡∏£‡∏∏‡∏õ‡∏¢‡∏≠‡∏î Performance", callback_data: "summary_perf" }
      ]
    ]);
    return Response.json({ ok: true });
  }

  // 2. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏£‡∏∏‡∏õ
  if (text === "summary_cheer" || text === "summary_perf") {
    await sendText(chatId, "‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà", [
      [
        { text: "7 ‡∏ß‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î", callback_data: `daterange_${text}_last7` },
        { text: "‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ", callback_data: `daterange_${text}_thismonth` }
      ],
      [{ text: "‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á", callback_data: `daterange_${text}_custom` }]
    ]);
    return Response.json({ ok: true });
  }

  // 3. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà (7 ‡∏ß‡∏±‡∏ô / ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ)
  if (text?.startsWith("daterange_summary_cheer") || text?.startsWith("daterange_summary_perf")) {
    let from, to;
    const today = new Date();

    if (text.endsWith("last7")) {
      to = today.toISOString().slice(0, 10);
      from = new Date(today.getTime() - 6 * 24 * 60 * 60 * 1000).toISOString().slice(0, 10);
    } else if (text.endsWith("thismonth")) {
      to = today.toISOString().slice(0, 10);
      from = `${today.getFullYear()}-${(today.getMonth() + 1).toString().padStart(2, "0")}-01`;
    }

    if (from && to) {
      try {
        if (text.includes("summary_cheer")) {
          const summaryText = await getCheerSummaryByChannel(from, to, false);
          await sendText(chatId, summaryText);
        } else if (text.includes("summary_perf")) {
          const summary = await getPerformanceSummary(from, to);
          if (typeof summary === "string") {
            await sendText(chatId, summary);
          } else {
            await sendText(chatId, summary.text);
            if (summary.image) await sendPhoto(chatId, summary.image);
          }
        }
      } catch (err) {
        console.error("‚ùå Error summary:", err);
        await sendText(chatId, "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•");
      }
    } else {
      await sendText(chatId, "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ä‡πà‡∏ß‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ");
    }

    return Response.json({ ok: true });
  }

  // 4. ‡∏ñ‡πâ‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å "‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á"
  if (text?.startsWith("daterange_summary_cheer_custom")) {
    await sendText(chatId, "üìÖ ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ä‡πà‡∏ß‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ‡πÄ‡∏ä‡πà‡∏ô:\ncustom_cheer:2025-05-01 ‡∏ñ‡∏∂‡∏á 2025-05-25");
    return Response.json({ ok: true });
  }

  if (text?.startsWith("daterange_summary_perf_custom")) {
    await sendText(chatId, "üìÖ ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ä‡πà‡∏ß‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ‡πÄ‡∏ä‡πà‡∏ô:\ncustom_perf:2025-05-01 ‡∏ñ‡∏∂‡∏á 2025-05-25");
    return Response.json({ ok: true });
  }

  // 5. ‡∏û‡∏¥‡∏°‡∏û‡πå custom date range
  if (/^custom_cheer:\d{4}-\d{2}-\d{2}\s*‡∏ñ‡∏∂‡∏á\s*\d{4}-\d{2}-\d{2}$/.test(text)) {
    const [from, to] = text.replace("custom_cheer:", "").split("‡∏ñ‡∏∂‡∏á").map((s) => s.trim());
    try {
      const summaryText = await getCheerSummaryByChannel(from, to, false);
      await sendText(chatId, summaryText);
    } catch (err) {
      console.error("‚ùå Error cheer custom:", err);
      await sendText(chatId, "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ä‡∏µ‡∏¢‡∏£‡πå‡∏Ç‡∏≤‡∏¢");
    }
    return Response.json({ ok: true });
  }

  if (/^custom_perf:\d{4}-\d{2}-\d{2}\s*‡∏ñ‡∏∂‡∏á\s*\d{4}-\d{2}-\d{2}$/.test(text)) {
    const [from, to] = text.replace("custom_perf:", "").split("‡∏ñ‡∏∂‡∏á").map((s) => s.trim());
    try {
      const summary = await getPerformanceSummary(from, to);
      if (typeof summary === "string") {
        await sendText(chatId, summary);
      } else {
        await sendText(chatId, summary.text);
        if (summary.image) await sendPhoto(chatId, summary.image);
      }
    } catch (err) {
      console.error("‚ùå Error perf custom:", err);
      await sendText(chatId, "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Performance");
    }
    return Response.json({ ok: true });
  }

  // fallback
  if (text) {
    await sendText(chatId, `üìù ‡∏Ñ‡∏∏‡∏ì‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ß‡πà‡∏≤: ${text}\n‡∏•‡∏≠‡∏á‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ï‡∏≤‡∏°‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö ‡πÄ‡∏ä‡πà‡∏ô: custom_perf:2025-05-01 ‡∏ñ‡∏∂‡∏á 2025-05-25`);
  }

  return Response.json({ ok: true });
}

// Helper function ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° + ‡∏õ‡∏∏‡πà‡∏°
async function sendText(chatId, text, buttons = null) {
  const payload = {
    chat_id: chatId,
    text,
    ...(buttons && {
      reply_markup: {
        inline_keyboard: buttons
      }
    })
  };

  const res = await fetch(`${TELEGRAM_API}/sendMessage`, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify(payload)
  });

  const result = await res.json();
  console.log("üì§ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏•‡πâ‡∏ß:", result.ok ? "‚úÖ OK" : result);
}

// Helper function ‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
async function sendPhoto(chatId, imageUrl, caption = '') {
  await fetch(`${TELEGRAM_API}/sendPhoto`, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({
      chat_id: chatId,
      photo: imageUrl,
      caption: caption
    })
  });
}
